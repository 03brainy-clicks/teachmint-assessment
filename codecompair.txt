import { useState, useEffect, useCallback } from "react";
import { useDispatch } from "react-redux";
import {
  updateOrderEndTime,
  updateOrderStatus,
} from "../store/slices/orderSlice";

const StageCard = ({ order, next }) => {
  const dispatch = useDispatch();
  const [elapsedTime, setElapsedTime] = useState({ minutes: 0, seconds: 0 });
  const [isRed, setIsRed] = useState(false);
  const [intervalId, setIntervalId] = useState(null);
  const [timeToPicked, setTimeToPicked] = useState({ minutes: 0, seconds: 0 });

  // Function to handle the "Next" button click
  const handleNext = useCallback(() => {
    // Reset the elapsed time when moving to the next stage
    setElapsedTime({ minutes: 0, seconds: 0 });

    // Stop the stopwatch when the status changes to "picked" or "ready"
    if (order.status === "picked" || order.status === "ready") {
      clearInterval(intervalId);
    }

    dispatch(updateOrderStatus({ orderId: order.id, newStatus: next }));

    if (next === "ready") {
      dispatch(
        updateOrderEndTime({
          orderId: order.id,
          newEndTime: new Date().getTime(),
        })
      );
    }
  }, [dispatch, order.id, next, order.status, intervalId]);

  useEffect(() => {
    let startTime;
    let elapsed;
    let threeMinTimer = 0;

    const updateElapsedTime = () => {
      // Stop updating elapsed time when the status is "picked"
      if (order.status === "picked") {
        return;
      }

      const currentTime = new Date().getTime();
      startTime = order.startTime;
      elapsed = Math.floor((currentTime - startTime) / 1000);
      const minutes = Math.floor(elapsed / 60);
      const seconds = elapsed % 60;
      setElapsedTime({ minutes, seconds });

      // Check if the elapsed time has passed the 3-minute mark and exclude "picked" and "ready" status
      if (elapsed >= 180 && order.status !== "picked" && order.status !== "ready") {
        setIsRed(true);
      } else {
        setIsRed(false);
      }

      // Stop the stopwatch when the status changes to "picked" or "ready"
      if (order.status === "picked" || order.status === "ready") {
        clearInterval(intervalId);
      }
    };

    const calculateTimeToPicked = () => {
      if (order.status === "picked") {
        const pickedTime = order.pickedTime; // Replace with the actual field representing when it was picked
        const timeDifference = Math.floor((pickedTime - startTime) / 1000);
        const minutes = Math.floor(timeDifference / 60);
        const seconds = timeDifference % 60;
        setTimeToPicked({ minutes, seconds });
      }
    };

    const checkThreeMinTimer = () => {
      if (threeMinTimer >= 180) {
        setIsRed(true);
        clearInterval(intervalId);
      } else {
        threeMinTimer += 1;
      }
    };

    // Initial calculations
    updateElapsedTime();
    calculateTimeToPicked();

    // Set up interval to update time every 1 second
    const id = setInterval(() => {
      updateElapsedTime();
      calculateTimeToPicked();
      checkThreeMinTimer();
    }, 1000);
    setIntervalId(id);

    // Clean up the interval when the component unmounts or status changes to "picked"
    return () => {
      clearInterval(id);
    };
  }, [order.startTime, order.status, order.pickedTime, intervalId]);

  return (
    <div
      className={`w-full p-3 border ${
        isRed
          ? "bg-red-500 border-red-500 text-white"
          : "border-pizza-500 text-gray-700"
      } text-center space-y-3 rounded-sm `}
    >
      {/* Display order information */}
      <h4 className="line-clamp-1 text-sm uppercase">
        Order-{order.id.slice(0, 6)}
      </h4>
      {order.status === "picked" ? (
        <p className="text-xs uppercase">Picked</p>
      ) : (
        <p className="text-xs">
          Time: {elapsedTime.minutes} min {elapsedTime.seconds} sec
        </p>
      )}
      {order.status === "picked" ? (
        ""
      ) : (
        <button
          onClick={handleNext}
          className={`${
            isRed
              ? "bg-white text-red-600"
              : "bg-pizza-600 hover:bg-pizza-500 text-white"
          }  p-2 px-5 text-xs  rounded-sm outline-none animate`}
        >
          Next
        </button>
      )}
    </div>
  );
};

export default StageCard;
